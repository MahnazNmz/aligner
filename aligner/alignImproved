#!/usr/bin/env python
import optparse
import sys
import numpy
from collections import defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

sys.stderr.write("Training with IBM Model 1...")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(e_data),open(f_data))[:opts.num_sents]]

#create sets of english and foreighn words
allEngWords = []
allForWords = []

#ENGLISH

#initialize t(e|f) uniformly
t_e_f_Eng = defaultdict(float)

for (es, fs) in bitext:
  for ew in es:
    for fw in fs + ["null"]:
      t_e_f_Eng[(ew, fw)] = 1.0/(len(fs) + 1) 

for i in range(20):
  
  #initialize
  count_e_f = defaultdict(float)
  total_f = defaultdict(float)

  for (es, fs) in bitext:
    for fw in fs + ["null"]:
      for ew in es:
        count_e_f[(ew,fw)] = 0
    total_f[fw] = 0

  s_total = defaultdict(float)
  for (es,fs) in bitext:
    #compute normalization
    for ew in set(es):
      s_total[ew] = 0
      for fw in set(fs + ["null"]):
        s_total[ew] += t_e_f_Eng[(ew, fw)]
    #collect counts
    for ew in set(es):
      for fw in set(fs + ["null"]):
        count_e_f[(ew,fw)] += t_e_f_Eng[(ew,fw)]/s_total[ew]
        total_f[fw] += t_e_f_Eng[(ew,fw)]/s_total[ew]

  #estimate probabilities
  for (es, fs) in bitext:
    for fw in fs + ["null"]:
      for ew in es:
        t_e_f_Eng[(ew, fw)] = count_e_f[(ew, fw)]/total_f[fw]
  sys.stderr.write(".")



#FOREIGN

#initialize t(e|f) uniformly
t_e_f_For = defaultdict(float)
for (es, fs) in bitext:
  for fw in fs:
    for ew in es + ["null"]:
      t_e_f_For[(fw, ew)] =  1.0/(len(es) + 1)

for i in range(20):
  
  #initialize
  count_e_f = defaultdict(float)
  total_e = defaultdict(float)
  for (es, fs) in bitext:
    for ew in es + ["null"]:
      for fw in fs:
        count_e_f[(fw, ew)] = 0
    total_e[ew] = 0
 
  s_total = defaultdict(float)
  for (es,fs) in bitext:
    #compute normalization
    for fw in set(fs):
      s_total[fw] = 0
      for ew in set(es + ["null"]):
        s_total[fw] += t_e_f_For[(fw, ew)]
    #collect counts
    for fw in set(fs):
      for ew in set(es + ["null"]):
        count_e_f[(fw,ew)] += t_e_f_For[(fw,ew)]/s_total[fw]
        total_e[ew] += t_e_f_For[(fw,ew)]/s_total[fw]

  #estimate probabilities
  for (es,fs) in bitext:
    for ew in es + ["null"]:
      for fw in fs:
        t_e_f_For[(fw, ew)] = count_e_f[(fw, ew)]/total_e[ew]
  
  sys.stderr.write(".")

tef = defaultdict(float)
tef_sum = 0
tef_sum_sq = 0
tef_len = 0

for (es, fs) in bitext:
  tf = defaultdict(float)
  for fw in fs + []:
    tf[fw] = 0
    for ew in es + ["null"]:
      tf[fw] += t_e_f_For[(fw, ew)]

  te = defaultdict(float)
  for ew in es:
    te[ew] = 0
    for fw in fs + ["null"]:
      te[ew] += t_e_f_Eng[(ew, fw)]

  for ew in es:
    for fw in fs + ["null"]:
      if tf[fw] == 0:
        tef[(ew, fw)] = 0
      else:
        tef[(ew,fw)] = (t_e_f_Eng[(ew, fw)] + t_e_f_For[(fw,ew)]*te[ew]/tf[fw])/2
      tef_sum += tef[(ew,fw)]
      tef_sum_sq += tef[(ew,fw)] ** 2
      tef_len += 1

tef_values = list(tef.values())
stdev = numpy.std(tef_values)
mean = numpy.mean(tef_values)

threshold = mean + (3 * stdev)

for (es,fs) in bitext:
  for (i, fw) in enumerate(fs):
    max_prob = -float('inf')
    translation = 0
    for (j, ew) in enumerate(es + ["null"]): 
      if tef[(ew,fw)] > max_prob:
        max_prob = tef[(ew,fw)]
        translation = j
      elif tef[(ew,fw)] == max_prob:
        if abs(j - i) < abs(translation - i):
          translation = j
    #threshold
    if max_prob > threshold and translation < len(fs):
      sys.stdout.write("%i-%i " % (i, translation)) 
  sys.stdout.write("\n")

sys.stderr.write("\n")
