#!/usr/bin/env python
import optparse
import sys
import models
import numpy
import math
from collections import namedtuple
from pythonds.graphs import PriorityQueue


optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=1, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=5, type="int", help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-s", "--stack-size", dest="s", default=100, type="int", help="Maximum stack size (default=1)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,  help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

# tm should translate unknown words as-is with probability 1
# had to add some weird fix for language model to deal with french words translated as themselves
for word in set(sum(french,())):
  if (word,) not in tm:
    tm[(word,)] = [models.phrase(word, 0.0)]
    lm.table[(word,)] = models.ngram_stats(0.0, 0.0)

def edgeCosts(v1, v2):
  if v2.isTerminator:
    return -lm.end(tuple(v1.english.split()[-2:]))
  elif v1.french == v2.french:
    return 0
  else:
    prob = -v2.tm_prob
    if v1.isTerminator:
      lm_state = lm.begin()
    else:
      lm_state = tuple(v1.english.split()[-2:])
    for word in v2.english.split():
      (lm_state, word_logprob) = lm.score(lm_state, word)
      prob += -word_logprob
    jumps = abs(v1.start - v2.start)
    prob += math.log(jumps**0.5)
    return prob

def minST(vertices, start):
  pq = PriorityQueue()
  marked = set()
  distances = dict()
  pred = dict()

  #prims algorithm
  for v in vertices.iterkeys():
    distances[v] = float('inf')

  distances[start] = 0
  pq.buildHeap([(distances[v],v) for v in vertices.iterkeys()])

  while not pq.isEmpty():
    current = pq.delMin()
    for next in vertices[current]:
      newCost = next[1] + distances[current]
      if v in pq and newCost < distances[next[0]]:
        pred[next[0]] = current
        distances[next[0]] = newCost
        pq.decreaseKey(next, newCost)

  #convert pred list to vertex list
  mst = {v:[] for v in vertices.iterkeys()}
  for p in pred.iterkeys():
    mst[pred[p]].append(p)

  return mst




vertex = namedtuple("vertex", "word, french, english, tm_prob, start, isLeft, isRight, isTerminator, isCopy") 
sys.stderr.write("Decoding...\n")
for f in french:
  vertices = {} 
  terminator = vertex("", (), "", 0.0, -1, True, True, True, False)
  #unigrams
  for start in range(len(f)):
    for phrase in tm[f[start:start+1]]:
      vertices[vertex(f[start], f[start:start+1], phrase.english, phrase.logprob, start, True, True, False, False)] = []
  #bigrams
  for start in range(len(f) - 1):
    if f[start:start+2] in tm:
      for phrase in tm[f[start:start+2]]:
        left = True
        for word in f[start:start+2]:
          vertices[vertex(word, f[start:start+2], phrase.english, phrase.logprob, start, left, not left, False, False)] = []
          #only two values, left becomes false for right value
          left = False
  #start/end vertex    
  vertices[terminator] = []
  
  #add edges
  for v in vertices.iterkeys():
    for adj in vertices.iterkeys():
      if not v == adj:
        if v.isTerminator:
          vertices[v].append((adj, edgeCosts(v, adj)))
        #every node points to the terminator (end) 
        elif adj.isTerminator:
          vertices[v].append((adj, edgeCosts(v, adj)))
        elif v.isLeft and adj.isRight and v.french == adj.french and len(v.french) == len(adj.french) and len(v.french) == 2:
          vertices[v].append((adj, edgeCosts(v,adj)))
        elif v.isRight and adj.isLeft and not v.french == adj.french:
          if len(v.french) == len(adj.french) and not v.word == adj.word:
            vertices[v].append((v, edgeCosts(v, adj)))
          elif len(v.french) == 1 and len(adj.french) == 2 and v.start not in range(adj.start,adj.start+2):
            vertices[v].append((v, edgeCosts(v,adj)))
          elif len(v.french) == 2 and len(adj.french) == 1 and adj.start not in range(v.start,v.start + 2):
            vertices[v].append((v, edgeCosts(v,adj)))

  sys.stderr.write(str(vertices))
  #transform AGTSP to ATSP
  for fword in f:
    numNodes = 0
    for v in vertices.iterkeys():
      if(v.word == fword):
        numNodes+=1

    foundFirst = False
    first = None
    first_edges = []
    prev = None
    last = None
    for v in vertices.iterkeys():
      if(v.word == fword):
        if not foundFirst:
          first = v
          first_edges = vertices[first]
          prev = v
          foundFirst = True
        else:
          vertices[prev] = vertices[v]
          vertices[prev].append((v, -numNodes))
          prev = v
        last = v
    vertices[last] = vertices[first]
    vertices[last].append((first, -numNodes))

  #need to hold copies temporarily so that graph size doesn't change in loop
  copies = {}
  #transform ATSP to TSP
  for v in vertices.iterkeys():
    copy = vertex(v.word, v.french, v.english, v.tm_prob, v.start, v.isLeft, v.isRight, v.isTerminator, True)
    copies[copy] = vertices[v]
    vertices[v] = []
    for u in vertices.iterkeys():
      for uu in vertices[u]:
        if v == uu[0]:
          vertices[v].append((vertex(u.word, u.french, u.english, u.tm_prob, u.start, u.isLeft, u.isRight, u.isTerminator, True), uu[1]))
    vertices[v].append((copy, -float('inf')))
    copies[copy].append((v, -float('inf')))

  for copy in copies.iterkeys():
    vertices[copy] = copies[copy]

  #at this point vertices is the finished graph for sentence f

  #find MST
  mst = minST(vertices, terminator)

  #depth first preorder traversal of mst
  marked = set()
  path = []
  stack = []
  stack.append(terminator)
  while not len(stack) == 0:
    v = stack.pop()
    if not v in marked:
      marked.add(v)
      path.append(v)
      for adj in mst[v]:
        stack.append(adj)

  # doesn't 'compile' yet
  translation = ""   
  prev == None   
  for v in path[2:-2]:
    #ignore copies in the path
    if v.isCopy:
      continue
    #ignore if node is in the same cluster
    if not prev == None and prev.word == v.word:
      continue
    #ignore if next node is in the same phrase as prev
    if prev.english == v.english and prev.french == v.french:
      continue
    translation += v.english + " "
    prev = v

  sys.stderr.write(".")


      





